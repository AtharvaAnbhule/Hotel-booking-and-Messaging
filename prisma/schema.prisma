// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  subscribeChannelIds String[] @db.ObjectId
  likedVideoIds String[] @db.ObjectId
  dislikedVideoIds String[] @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAT       DateTime       @updatedAt
  favouriteIds    String[]       @db.ObjectId
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id]) // it refer to conversationIds which refer to id of conversations
  seenMessageIds  String[]       @db.ObjectId
  seenMessages    Message[]      @relation("Seen", fields: [seenMessageIds], references: [id])
  messages        Message[]

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
  channel Channel[]
 
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // unique combination we want
}

model Channel{
   id                String  @id @default(auto()) @map("_id") @db.ObjectId
   userId            String  @db.ObjectId @unique
   name              String
   handle            String
   imageSrc          String 
   createdAt         DateTime @default(now())
   subscribeCount    Int      @default(0)

     user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    comments Comment[]
    videos   Video[]
}

model Video{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  channelId String @db.ObjectId
  title String
  description String
  likeCount Int @default(0)
  dislikeCount Int @default(0)
  viewCount   Int @default(0)
  createdAt  DateTime @default(now())
  thumnailSrc String 
  videoSrc    String

 channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)  // if cxhannel deleted video is deleted

 comments Comment[]
}

model Comment{
   id            String   @id @default(auto()) @map("_id") @db.ObjectId
   videoId       String   @db.ObjectId
   channelId     String @db.ObjectId
   text          String
   createdAt     DateTime @default(now())

    channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)  // if cxhannel deleted video is deleted
    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)  // if cxhannel deleted video is deleted

}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messageIds String[]  @db.ObjectId
  messages   Message[]
  userIds    String[]  @db.ObjectId
  users      User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  seenIds        String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  userId        String   @db.ObjectId
  price         Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
